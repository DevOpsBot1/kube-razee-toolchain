---
defaultBaseImageVersion: latest
properties:
- name: IBM_CLOUD_API_KEY
  value: ${API_KEY}
  type: secure
stages:
- name: BUILD
  inputs:
  - type: git
    branch: master
    service: ${GIT_REPO}    
  triggers:
  - type: commit
  properties:
  - name: IMAGE_NAME
    value: ${APP_NAME}
    type: text
  jobs:
  - name: Fetch code
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |+
      #!/bin/bash
      # set -x

      # Git repo cloned at $WORKING_DIR, copy into $ARCHIVE_DIR
      mkdir -p $ARCHIVE_DIR
      cp -R -n ./ $ARCHIVE_DIR/ || true

      # Record git info
      echo "GIT_URL=${GIT_URL}" >> $ARCHIVE_DIR/build.properties
      echo "GIT_BRANCH=${GIT_BRANCH}" >> $ARCHIVE_DIR/build.properties
      echo "GIT_COMMIT=${GIT_COMMIT}" >> $ARCHIVE_DIR/build.properties
      echo "SOURCE_BUILD_NUMBER=${BUILD_NUMBER}" >> $ARCHIVE_DIR/build.properties
      # git user and password needed for later "Deploy Razee files" job
      GIT_REMOTE_URL=$( git config --get remote.origin.url )
      GIT_USER=$( echo ${GIT_REMOTE_URL} | cut -d/ -f3 | cut -d: -f1 )
      GIT_PASSWORD=$( echo ${GIT_REMOTE_URL} | cut -d: -f3 | cut -d@ -f1 )      
      echo "GIT_USER=${GIT_USER}" >> $ARCHIVE_DIR/build.properties
      echo "GIT_PASSWORD=${GIT_PASSWORD}" >> $ARCHIVE_DIR/build.properties
      cat $ARCHIVE_DIR/build.properties | grep -v -i password

      # check if doi is integrated in this toolchain
      if jq -e '.services[] | select(.service_id=="draservicebroker")' _toolchain.json; then
        # Record build information
        ibmcloud login --apikey ${IBM_CLOUD_API_KEY} --no-region
        ibmcloud doi publishbuildrecord --branch ${GIT_BRANCH} --repositoryurl ${GIT_URL} --commitid ${GIT_COMMIT} \
          --buildnumber ${BUILD_NUMBER} --logicalappname ${IMAGE_NAME} --status pass
      fi
  - name: Unit Tests
    type: tester
    script: |-
      #!/bin/bash
      # set -x
      if [ -f ./tests/run-tests.sh ]; then
        source ./tests/run-tests.sh
        RESULT=$?
        if [ ! -z "${FILE_LOCATION}"]; then
          if [ ${RESULT} -ne 0 ]; then STATUS=fail; else STATUS=pass; fi
            if jq -e '.services[] | select(.service_id=="draservicebroker")' _toolchain.json; then
              ibmcloud login --apikey ${IBM_CLOUD_API_KEY} --no-region
              ibmcloud doi publishtestrecord --type unittest --buildnumber ${BUILD_NUMBER} --filelocation ${FILE_LOCATION} \
                --buildnumber ${BUILD_NUMBER} --logicalappname ${IMAGE_NAME} --status ${STATUS}
            fi
          exit $RESULT
        fi
      else
        echo "Test runner script not found: ./tests/run-tests.sh"
      fi
- name: CONTAINERIZE
  properties:
  - name: buildprops
    value: build.properties
    type: file
  - name: DOCKER_ROOT
    value: .
    type: text
  - name: DOCKER_FILE
    value: Dockerfile
    type: text
  - name: PIPELINE_IMAGE_URL
    value: undefined
    type: text
  inputs:
  - type: job
    stage: BUILD
    job: Fetch code
  triggers:
  - type: stage
  jobs:
  - name: Check dockerfile
    type: tester
    script: |-
      #!/bin/bash
      # uncomment to debug the script
      # set -x
      # copy the script below into your app code repo (e.g. ./scripts/check_dockerfile.sh) and 'source' it from your pipeline job
      #    source ./scripts/check_prebuild.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_dockerfile.sh")
      # ------------------
      # source: https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_dockerfile.sh

      # This script lints Dockerfile.
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_dockerfile.sh")
  - name: Check registry
    type: builder
    build_type: cr
    # artifact_dir: ''
    target:
      region_id: ${REGISTRY_REGION_ID}
      api_key: ${API_KEY}
    namespace: ${REGISTRY_NAMESPACE}
    image_name: ${APP_NAME}
    script: |-
      #!/bin/bash
      # uncomment to debug the script
      # set -x
      # copy the script below into your app code repo (e.g. ./scripts/check_registry.sh) and 'source' it from your pipeline job
      #    source ./scripts/check_registry.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_registry.sh")
      # ------------------
      # source: https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_registry.sh

      # This script checks presence of registry namespace.
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_registry.sh")
  - name: Build container image
    type: builder
    build_type: cr
    artifact_dir: output
    target:
      region_id: ${REGISTRY_REGION_ID}
      api_key: ${API_KEY}
    namespace: ${REGISTRY_NAMESPACE}
    image_name: ${APP_NAME}
    script: |
      #!/bin/bash
      # uncomment to debug the script
      # set -x
      # copy the script below into your app code repo (e.g. ./scripts/build_image.sh) and 'source' it from your pipeline job
      #    source ./scripts/build_image.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/build_image.sh")
      # ------------------
      # source: https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/build_image.sh

      # This script does build a Docker image into IBM Container Service private image registry.
      # Minting image tag using format: BUILD_NUMBER-BRANCH-COMMIT_ID-TIMESTAMP
      # Also copies information into a build.properties file, so they can be reused later on by other scripts (e.g. image url, chart name, ...)
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/build_image.sh")
  - name: Check vulnerabilities
    type: tester
    test_type: vulnerabilityadvisor
    use_image_from_build_input: true
    fail_stage: false
    target:
      region_id: ${REGISTRY_REGION_ID}
      api_key: ${API_KEY}
    script: |
      #!/bin/bash
      # uncomment to debug the script
      # set -x
      # copy the script below into your app code repo (e.g. ./scripts/check_vulnerabilities.sh) and 'source' it from your pipeline job
      #    source ./scripts/check_vulnerabilities.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_vulnerabilities.sh")
      # ------------------
      # source: https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_vulnerabilities.sh
      # Check for vulnerabilities of built image using Vulnerability Advisor
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_vulnerabilities.sh")
- name: BUILD ARTIFACT
  inputs:
  - type: job
    stage: CONTAINERIZE
    job: Build container image
  triggers:
  - type: stage
  properties:
  - name: buildprops
    value: build.properties
    type: file
  - name: DEPLOYMENT_FILE
    value: deployment.yml
    type: text
  jobs:
  - name: Build deploy.yml artifact
    type: builder
    artifact_dir: ''
    build_type: shell
    script:
      $ref: build_deploy_artifact.sh
      $refType: text
- name: DEPLOY
  inputs:
  - type: job
    stage: BUILD ARTIFACT
    job: Build deploy.yml artifact
  triggers:
  - type: stage
  properties:
  - name: buildprops
    value: build.properties
    type: file
  - name: CLUSTER_REGION
    value: ${PROD_REGION_ID}
    type: text
  - name: CLUSTER_NAMESPACE
    value: ${PROD_CLUSTER_NAMESPACE}
    type: text
  - name: DEPLOYMENT_FILE
    value: deployment.yml
    type: text
  - name: REMOTERESOURCE_FILE
    value: remoteresource.yml
    type: text
  - name: APP_URL
    value: undefined
    type: text  
  - name: CONFIG_REPO_BRANCH
    value: master
    type: text
  jobs:
  - name: Deploy commit
    type: builder
    artifact_dir: ''
    build_type: shell
    script:
      $ref: deploy_commit.sh
      $refType: text
- name: SETUP
  inputs:
  - type: job
    stage: DEPLOY
    job: Deploy commit
  triggers:
  - type: stage
    enabled: false
  properties:
  - name: buildprops
    value: build.properties
    type: file
  - name: IMAGE_NAME
    value: ${APP_NAME}
    type: text
  - name: CLUSTER_REGION
    value: ${PROD_REGION_ID}
    type: text
  - name: CLUSTER_NAMESPACE
    value: ${PROD_CLUSTER_NAMESPACE}
    type: text
  - name: DEPLOYMENT_FILE
    value: deployment.yml
    type: text
  - name: INSTALL_RAZEE
    value: ${INSTALL_RAZEE}
    type: text
  - name: REMOTERESOURCE_FILE
    value: remoteresource.yml
    type: text
  - name: APP_URL
    value: undefined
    type: text  
  - name: CONFIG_REPO_BRANCH
    value: master
    type: text
  jobs:
  - name: Apply Razee resource
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      api_key: ${API_KEY}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script:
      $ref: apply_razee_resource.sh
      $refType: text
  - name: Check health
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      resource_group: ${PROD_RESOURCE_GROUP}
      api_key: ${API_KEY}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |-
      #!/bin/bash
      # uncomment to debug the script
      # set -x
      # copy the script below into your app code repo (e.g. ./scripts/check_health.sh) and 'source' it from your pipeline job
      #    source ./scripts/check_health.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_health.sh")
      # ------------------
      # source: https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_health.sh
      # Check liveness and readiness probes to confirm application is healthy
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_health.sh")
